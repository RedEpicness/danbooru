<%# locals: comment, context, dtext_data, moderation_reports %>

<% if CurrentUser.is_moderator? || (params[:search] && params[:search][:is_deleted] =~ /t/) || !comment.is_deleted? %>
  <a name="comment-<%= comment.id %>"></a>
  <article id="comment_<%= comment.id %>" class="comment message"
           data-id="<%= comment.id %>"
           data-post-id="<%= comment.post_id %>"
           data-creator-id="<%= comment.creator_id %>"
           data-updater-id="<%= comment.updater_id %>"
           data-score="<%= comment.score %>"
           data-do-not-bump-post="<%= comment.do_not_bump_post? %>"
           data-is-deleted="<%= comment.is_deleted? %>"
           data-is-sticky="<%= comment.is_sticky? %>"
           data-below-threshold="<%= comment.score < CurrentUser.user.comment_threshold %>"
           <% if moderation_reports.present? && policy(moderation_reports).show? %>
            data-is-reported="<%= moderation_reports.pluck(:model_id).include?(comment.id) %>"
           <% end %>
           data-is-voted="<%= comment.voted_by?(CurrentUser.user) %>">
    <div class="author">
      <div class="author-name">
        <%= link_to_user comment.creator %>
        <% if comment.is_deleted? %>
          (deleted)
        <% end %>
      </div>
      <%= link_to time_ago_in_words_tagged(comment.created_at), post_path(comment.post, anchor: "comment_#{comment.id}"), class: "message-timestamp" %>
    </div>
    <div class="content">
      <div class="body prose">
        <%= format_text(comment.body, data: dtext_data) %>
      </div>
      <%= render "application/update_notice", record: comment %>

      <% if policy(comment).create? %>
        <menu>
          <% if context == :index_by_comment %>
            <li><%= link_to "Reply", new_comment_path(id: comment, comment: { post_id: comment.post_id }), class: "reply-link" %></li>
          <% else %>
            <li><%= link_to "Reply", new_comment_path(id: comment, comment: { post_id: comment.post_id }), class: "reply-link", remote: true %></li>
          <% end %>

          <% if policy(comment).update? %>
            <% if comment.is_deleted? %>
              <li><%= link_to "Undelete", undelete_comment_path(comment.id), method: :post, remote: true %></li>
            <% else %>
              <li><%= link_to "Delete", comment_path(comment.id), "data-confirm": "Are you sure you want to delete this comment?", method: :delete, remote: true %></li>
            <% end %>
            <li><%= link_to "Edit", edit_comment_path(comment.id), id: "edit_comment_link_#{comment.id}", class: "edit_comment_link" %></li>
          <% end %>
          <li class="comment-vote-up-link">
            <%= link_to "Vote up", comment_comment_votes_path(comment_id: comment.id, score: "up"), method: :post, remote: true %>
          </li>
          <li class="comment-vote-down-link">
            <%= link_to "Vote down", comment_comment_votes_path(comment_id: comment.id, score: "down"), method: :post, remote: true %>
          </li>
          <li class="comment-unvote-link">
            <%= link_to "Unvote", comment_comment_votes_path(comment_id: comment.id), method: :delete, remote: true %>
          </li>
          <% if policy(comment).reportable? %>
            <li><%= link_to "Report", new_moderation_report_path(moderation_report: { model_type: "Comment", model_id: comment.id }), remote: true %></li>
          <% end %>
        </menu>
        <% if policy(comment).update? %>
          <%= render "comments/form", comment: comment, hidden: true %>
        <% end %>
      <% end %>
    </div>
  </article>
<% end %>
